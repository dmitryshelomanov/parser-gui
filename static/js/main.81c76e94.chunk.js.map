{"version":3,"sources":["lib/babel/executors.ts","ui/styles.ts","lib/overlay.tsx","assets/mock.ts","features/web-preview/preview.tsx","lib/parser.ts","lib/xpath.ts","ui/organisms/Modal.tsx","ui/organisms/stub.tsx","ui/organisms/loyout.tsx","features/token-creator/models/tokens.ts","features/token-creator/models/editors.ts","lib/codegen/prettier.ts","lib/codegen/tokens.ts","features/token-creator/Modal.tsx","features/common/components/nodes/elements.tsx","features/common/components/nodes/tree.tsx","lib/codegen/libs.ts","features/token-creator/list/tokens.tsx","lib/editor.tsx","features/token-creator/list/editors.tsx","features/code-preview/preview.tsx","pages/home/page.tsx","pages/index.tsx","index.tsx","lib/babel/traverse.ts"],"names":["executeTransformer","code","args","libs","getFunctionFromCode","name","body","result","params","importedLibs","getImportsFromGUI","libsSource","reduce","acc","lib","fn","eval","join","slice","error","toString","GlobalStyle","createGlobalStyle","overlayContext","createContext","overlayComponentContext","block","backgroundColor","position","width","height","top","left","zIndex","pointerEvents","getElementBounging","target","rect","nodeName","range","ownerDocument","createRange","selectNode","getBoundingClientRect","detach","getRect","scrollTop","scrollLeft","OverlayProvider","children","elementClicked","useState","styles","setStyles","refElementClicked","useRef","root","setRoot","targetElement","setTargetElement","resetStyles","useCallback","useEffect","lastElement","moveHandler","event","localName","currentStyles","prev","prevLeave","onmouseleave","clickHandler","preventDefault","current","addEventListener","removeEventListener","overlay","style","useOverlayFacade","omittedOverlay","useMemo","Provider","value","useOverlay","useContext","ActiveNodeGuard","memo","isActive","x","y","WithActivePreviewNode","currentNode","Iframe","styled","iframe","WebPreview","ref","setRef","jsx","mountNode","props","src","onLoad","contentWindow","document","console","log","createPortal","nodeParser","elements","queue","map","WeakMap","id","length","node","shift","nodes","childNodes","parentNode","parentElement","get","attrs","attributes","it","nodeInfo","textContent","replace","trim","push","set","unshift","getElementFromXPath","path","targert","nodesSnapshot","evaluate","XPathResult","ORDERED_NODE_SNAPSHOT_TYPE","i","snapshotLength","snapshotItem","getXpathFromElement","el","nodeType","sames","filter","call","tagName","toLowerCase","indexOf","xpathTransformers","xpath","split","childTag","ModalUI","isOpened","closeModal","onConfirm","confirmLabel","Dialog","isShown","title","onCloseComplete","div","Heading","Col","p","jc","ai","Row","addToken","createEvent","removeToken","$tokens","createStore","on","state","token","$tokensCounter","tokens","initalState","opened","notice","wrapp","f","parser","plugins","plugin","openEditor","closeEditor","changeCode","$editors","$openedEditors","editors","Object","keys","PaneUI","Pane","PaneSettings","FormWrapper","removeLast","attachAllChildren","TokenModal","onClose","tokenName","setTokenName","allChildren","setAllChildren","onlyByTag","setOnlyByTag","nodetag","mappedXpath","Label","Text","Checkbox","checked","onChange","TextInput","colors","TagWrapper","lvl","css","TextWrapper","isComment","AttributesWrapper","span","TreeContainer","pre","Tag","onLeave","onHover","start","onMouseEnter","onMouseLeave","color","text","Comment","NodeTree","nodeList","changeOverlayStyles","draft","onClick","type","payload","key","defaultLibs","$$element","element","selector","querySelectorAll","$element","findedElement","querySelector","Error","classList","textExtractor","ShortInformation","Additional","Icons","TokenItem","visible","setVisible","parsed","useStoreMap","store","tokenId","toggleVisible","border","EditIcon","ChevronUpIcon","ChevronRightIcon","RemoveIcon","data","expandLevel","TokensList","useStore","Wrapper","CodeEditor","nextValue","mode","theme","editorProps","$blockScrolling","setOptions","enableBasicAutocompletion","enableLiveAutocompletion","enableSnippets","showLineNumbers","tabSize","EditorWrapper","NoticeWrapper","InspectorWrapper","CloseEditorIcon","parsedId","CrossIcon","margin","Notice","setOpened","setResult","find","ChevronDownIcon","Button","TokenEditor","CodePreview","selectedNode","setSelectedNode","Math","random","action","next","TablistUI","Tablist","Title","HomePage","openedEditors","setElement","selectedTabName","setSelectedTabName","counter","tabs","selectedIndex","findIndex","tab","watch","size","background","marginRight","index","Tab","onSelect","isSelected","aria-controls","Pill","display","startsWith","condition","Paragraph","RootRouter","component","getElementById","ReactDOM","render","ast","parse","sourceType","traverse","FunctionDeclaration","generate","param","isImportSpecifier","ImportDeclaration","source","specifiers","imported"],"mappings":"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","file":"static/js/main.81c76e94.chunk.js","sourcesContent":["import { getFunctionFromCode, getImportsFromGUI } from \"./traverse\";\n\nexport function executeTransformer({\n  code,\n  args,\n  libs,\n}: {\n  code: string;\n  args: unknown[];\n  libs: Record<string, unknown>;\n}) {\n  try {\n    const { result, params } = getFunctionFromCode({\n      code,\n      name: \"transformer\",\n      body: true,\n    });\n\n    const importedLibs = getImportsFromGUI({ code });\n\n    const libsSource = importedLibs.reduce(\n      (acc, lib) => (libs[lib] ? `${acc} \\n const ${lib} = ${libs[lib]}` : acc),\n      \"\"\n    );\n\n    const fn = eval(`(${params.join()}) => {\n      ${libsSource}\n      ${result.slice(1)}  \n    `);\n\n    return fn(args);\n  } catch (error) {\n    // @ts-ignore\n    return error.toString();\n  }\n}\n","import { createGlobalStyle } from \"styled-components\";\n\nexport const GlobalStyle = createGlobalStyle`\n  body {\n    margin: 0;\n  }\n\n  #root {\n    height: 100vh\n  }\n\n  pre {\n    white-space: normal;\n  }\n`;\n","import {\n  createContext,\n  memo,\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from \"react\";\n\nconst overlayContext = createContext({} as Omit<OverlayResult, \"overlay\">);\nconst overlayComponentContext = createContext<JSX.Element | null>(null);\n\nexport type OverlayResult = {\n  overlay: JSX.Element;\n  setRoot: (ar0: Document) => void;\n  setStyles: (\n    fn: (\n      ar0: Record<string, string | number>\n    ) => Record<string, string | number>\n  ) => void;\n  resetStyles: () => void;\n  root?: Document;\n  targetElement: HTMLElement | null;\n};\n\ntype OverlayParams = {\n  elementClicked: (element: HTMLElement) => void;\n};\n\nconst block = {\n  backgroundColor: \"rgb(202 0 0 / 40%)\",\n  position: \"fixed\" as const,\n  width: 0,\n  height: 0,\n  top: 0,\n  left: 0,\n  zIndex: 999999999,\n  pointerEvents: \"none\" as const,\n};\n\nfunction getRect(target: HTMLElement) {\n  if (target.nodeName === \"#text\" || target.nodeName === \"#comment\") {\n    const range = target.ownerDocument.createRange();\n    range.selectNode(target);\n\n    const rect = range.getBoundingClientRect();\n    range.detach();\n\n    return rect;\n  }\n\n  const rect = target.getBoundingClientRect();\n\n  return rect;\n}\n\nexport function getElementBounging(target: HTMLElement) {\n  const rect = getRect(target);\n\n  return {\n    width: rect.width,\n    height: rect.height,\n    top: rect.top + target.scrollTop,\n    left: rect.left + target.scrollLeft,\n  };\n}\n\nexport function useOverlayFacade({\n  elementClicked,\n}: OverlayParams): OverlayResult {\n  const [styles, setStyles] = useState(block);\n  const refElementClicked = useRef(elementClicked);\n  const [root, setRoot] = useState<Document>();\n  const [targetElement, setTargetElement] = useState<HTMLElement | null>();\n\n  const resetStyles = useCallback(() => {\n    setStyles(block);\n  }, []);\n\n  useEffect(() => {\n    if (root) {\n      let lastElement: HTMLElement | null = null;\n\n      const moveHandler = (event: MouseEvent & { target: HTMLElement }) => {\n        const { target } = event;\n\n        if (target && lastElement !== target && target.localName !== \"html\") {\n          const currentStyles = getElementBounging(target);\n\n          setStyles((prev) => ({\n            ...prev,\n            ...currentStyles,\n          }));\n\n          const prevLeave = target.onmouseleave;\n\n          target.onmouseleave = () => {\n            lastElement = null;\n            setStyles(block);\n            setTargetElement(null);\n            target.onmouseleave = prevLeave;\n          };\n\n          lastElement = target;\n          setTargetElement(target);\n        }\n      };\n\n      const clickHandler = (event: MouseEvent & { target: HTMLElement }) => {\n        event.preventDefault();\n\n        if (refElementClicked.current) {\n          refElementClicked.current(event.target);\n        }\n      };\n\n      // @ts-ignore\n      root.addEventListener(\"mousemove\", moveHandler);\n      // @ts-ignore\n      root.addEventListener(\"click\", clickHandler);\n\n      return () => {\n        // @ts-ignore\n        root.removeEventListener(\"mousemove\", moveHandler);\n        // @ts-ignore\n        root.removeEventListener(\"click\", clickHandler);\n      };\n    }\n  }, [root, setStyles]);\n\n  if (refElementClicked.current !== elementClicked) {\n    refElementClicked.current = elementClicked;\n  }\n\n  return {\n    overlay: <div style={styles} />,\n    setRoot,\n    // @ts-ignore\n    setStyles,\n    resetStyles,\n    root,\n    targetElement: targetElement ?? null,\n  };\n}\n\nexport function OverlayProvider({\n  children,\n  ...props\n}: { children: JSX.Element } & OverlayParams) {\n  const { overlay, setRoot, setStyles, resetStyles, root, targetElement } =\n    useOverlayFacade(props);\n\n  const omittedOverlay = useMemo(() => {\n    return {\n      setRoot,\n      setStyles,\n      resetStyles,\n      root,\n      targetElement,\n    };\n  }, [setRoot, setStyles, resetStyles, root, targetElement]);\n\n  return (\n    <overlayContext.Provider value={omittedOverlay}>\n      <overlayComponentContext.Provider value={overlay}>\n        {children}\n      </overlayComponentContext.Provider>\n    </overlayContext.Provider>\n  );\n}\n\nexport function useOverlay() {\n  const overlay = useContext(overlayContext);\n\n  return overlay;\n}\n\nexport function useOverlayComponent() {\n  const overlay = useContext(overlayComponentContext);\n\n  return overlay;\n}\n\nconst ActiveNodeGuard = memo(\n  ({\n    children,\n    isActive,\n  }: {\n    children: (arg0: boolean) => JSX.Element;\n    isActive: boolean;\n  }) => children(isActive),\n  (x, y) => x.isActive === y.isActive\n);\n\nexport function WithActivePreviewNode({\n  children,\n  currentNode,\n}: {\n  children: (arg0: boolean) => JSX.Element;\n  currentNode: HTMLElement;\n}) {\n  const { targetElement } = useOverlay();\n\n  return (\n    <ActiveNodeGuard isActive={currentNode === targetElement}>\n      {children}\n    </ActiveNodeGuard>\n  );\n}\n","export const html = `\n\n<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n  <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\" />\n  <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/normalize/8.0.1/normalize.min.css\" />\n  <link rel=\"stylesheet\" href=\"style.css\" />\n  <title>CV</title>\n</head>\n\n<body>\n  <canvas></canvas>\n  <div class=\"container\">\n    <div class=\"bio\">\n      <img src=\"avatar.jpg\" draggable=\"false\" />\n      <div class=\"position\">\n        <h1>Шеломанов Дмитрий</h1>\n        <p>Frontend engineer</p>\n        <div class=\"social\">\n          <a href=\"https://vk.com/dmitryshelomanov\" target=\"_blank\">vk</a>\n          <a href=\"malito:dmitryshelomanov@mail.ru\" target=\"_blank\">email</a>\n          <a href=\"https://github.com/dmitryshelomanov\" target=\"_blank\">github</a>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"row\">\n      <div class=\"col production\">\n        <h2>Опыт работы</h2>\n\n        <div class=\"expirience\">\n          <h3>ООО БК «Олимп»</h3>\n          <p class=\"title\">- Senior Frontend Developer (Июнь 2020 - по настоящее время)</p>\n          <p>Обязанности:</p>\n          <ul>\n            <li>Разработка мобильной и десктопной версии сайта</li>\n            <li>\n              Разработка SDK для написания таких же букмекерских контор </br>\n              (Можно подключать логику и кастомизировать, не важно что отвечает за рендер)\n            </li>\n            <li>Внедрил ревью кода и фиче бранчи</li>\n            <li>Внедрил тестирование</li>\n          </ul>\n          <p>Достижения:</p>\n          <ul>\n            <li>Разработан гибкий SDK</li>\n            <li>Разработана система компонентов</li>\n            <li>Переписал старый код с использованием SDK</li>\n            <li>Успешно внедрены новые архитектурные решения</li>\n          </ul>\n          <p>Используемые технологии:</p>\n          <ul>\n            <li>HTML, CSS</li>\n            <li>JS, ES6</li>\n            <li>React, Styled Components, Effector, Typescript</li>\n            <li>Webpack</li>\n          </ul>\n        </div>\n    \n        <div class=\"expirience\">\n          <h3>ООО «Диалог»</h3>\n          <p class=\"title\">- Senior Frontend Developer (Май 2019 - Август 2020)</p>\n          <p>Обязанности:</p>\n          <ul>\n            <li>Покрытие тестами ui кита.</li>\n            <li>Покрытие тестами платформу (dialog-web-platform).</li>\n            <li>Разработка модулей для платформы.</li>\n            <li>Участие в разработке архитектуры.</li>\n            <li>Участие в ревью кода.</li>\n          </ul>\n          <p>Достижения:</p>\n          <ul>\n            <li>\n              Разработан модуль поиска групп и пользователей (локально плюс\n              глобально).\n            </li>\n            <li>Разработана система настроек.</li>\n            <li>Созданы компоненты для виртуализации и мульти селекта.</li>\n            <li>Внедрен просмотрщик изображений.</li>\n            <li>\n              Внедрены решения по архитектуре (работа с браузерной бд плюс\n              локальный стейт).\n            </li>\n          </ul>\n          <p>Используемые технологии:</p>\n          <ul>\n            <li>HTML, CSS</li>\n            <li>JS, ES6</li>\n            <li>React, AstroTurf, RxJs, RxDb, Flow, Testing-library</li>\n            <li>Webpack, Lerna</li>\n          </ul>\n        </div>\n    \n        <div class=\"expirience\">\n          <h3>Unitemp</h3>\n          <p class=\"title\">- Старший разработчик (Февраль 2018 - Май 2019)</p>\n          <p>Обязанности:</p>\n          <ul>\n            <li>Написание кроссплатформенного приложения на React native.</li>\n            <li>Разработка архитектуры с нуля для приложения.</li>\n            <li>Поиск багов и форк сторонних библиотек.</li>\n            <li>Написание собственных библиотек в open source.</li>\n          </ul>\n          <p>Используемые технологии:</p>\n          <ul>\n            <li>JS, ES6</li>\n            <li>React Native</li>\n            <li>redux, redux-thunk, recompose, нативные библиотеки</li>\n          </ul>\n        </div>\n    \n        <div class=\"expirience\">\n          <h3>ООО \"Мир Идей\"</h3>\n          <p class=\"title\">- Web developer (Июль 2017 - Февраль 2018)</p>\n          <p>Обязанности:</p>\n          <ul>\n            <li>Верстка лендингов.</li>\n            <li>Разработка spa на vue js.</li>\n            <li>Поддержка существующих проектов.</li>\n            <li>Разработка платформы для обработки баннеров.</li>\n          </ul>\n          <p>Используемые технологии:</p>\n          <ul>\n            <li>HTML, CSS</li>\n            <li>JS, ES6, PHP</li>\n            <li>Vue, React, laravel</li>\n            <li>Webpack, redux, redux-thunk</li>\n          </ul>\n        </div>\n      </div>\n\n      <div class=\"col pet\">\n        <h2>О себе</h2>\n\n        <p>\n          Frontend Developer с опытом разработки мобильных приложений на React Native.\n          Увлекаюсь новыми языками программирования (из последних Rust, Haskell, Reason).\n          Изучаю Computer Science. Помогаю новичкам и пытаюсь писать статьи. В дальнейшем хотел бы попробовать вести курсы.\n        </p>\n\n        <div class=\"expirience\">\n          <h3>Explory (совместный стартап)</h3>\n          <p class=\"title\">-</p>\n          <p>Обязанности:</p>\n          <ul>\n            <li>Разработка приложения на React Native</li>\n          </ul>\n          <p>Достижения:</p>\n          <ul>\n            <li>Написано большое приожения (порядка 80 экранов)</li>\n            <li>Написано много интенесных решений внутри приложения</li>\n            <li>Написано решение для сокетного апи</li>\n            <li>Попробовался в роли лида в мобильной разработке</li>\n          </ul>\n          <p>Используемые технологии:</p>\n          <ul>\n            <li>React Native, Styled-components</li>\n            <li>Effector</li>\n            <li>Typescript</li>\n          </ul>\n          <a href=\"https://apps.apple.com/ru/app/explory/id1512117513\" target=\"_blank\">ios</a>\n          <a href=\"https://play.google.com/store/apps/details?id=io.explory\" target=\"_blank\">andoid</a> \n        </div>\n    \n        <h3>Демо проекты (которые возможно было задеплоить)</h3>\n    \n        <div class=\"projects\">\n          <div>\n            <a href=\"https://dmitryshelomanov.github.io/reason-game-of-life/\" target=\"_blank\">Game of Live</a>\n            <p>\n              Классическая игра жизнь. Написана на языке программирования Reason\n            </p>\n          </div>\n          <div>\n            <a href=\"https://dmitryshelomanov.github.io/tower_of_hanoi/\" target=\"_blank\">Towers of Hanoi</a>\n            <p>\n              Было интересно рассмотреть этот алгоритм. Задачу можно решить с помощью бота или самому (перетягивая кольца)\n            </p>\n          </div>\n          <div>\n            <a href=\"https://dmitryshelomanov.github.io/snake/\" target=\"_blank\">Snake AI</a>\n            <p>\n              В процессе разработке проекта я научился работать с графами.\n              В этом проекте можно увидеть визуализацию алгоритмов поиска пути (A*, Дейкстра и другие).\n              Визуализация в игровой форме - классическая змейка, так же можно поиграть против ботов\n            </p>\n          </div>\n          <div>\n            <a href=\"https://github.com/mobileFight\" target=\"_blank\">Мобитва next</a>\n            <a href=\"http://imobitva.ru/\" target=\"_blank\">(референс)</a>\n            <p>\n              Зародыш клона очень старой игры. Пишется на React + NodeJs.\n              Очень интересно реализовать систему квестов и систему боя (Pull requests are welcome)\n            </p>\n          </div>\n          <div>\n            <a href=\"https://dmitryshelomanov.github.io/music-player/\" target=\"_blank\">Музыкальный плеер</a>\n            <p>\n              Простенький плеер с визуализацией\n            </p>\n          </div>\n        </div>\n\n        <h2>Скилы</h2>\n\n        <div class=\"skills\">\n          <div>\n            <p>Языки</p>\n            <ul>\n              <li>HTML, CSS</li>\n              <li>JS</li>\n              <li>Reason</li>\n              <li>Rust</li>\n            </ul>\n          </div>\n          <div>\n            <p>Технологии</p>\n            <ul>\n              <li>React, Vue</li>\n              <li>Reason React</li>\n              <li>React Native</li>\n              <li>Webpack, gulp</li>\n              <li>Node js</li>\n              <li>Koa, Express</li>\n              <li>RxJs, RxDb</li>\n            </ul>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</body>\n</html>\n`;\n","import { useState } from \"react\";\nimport styled from \"styled-components\";\nimport { createPortal } from \"react-dom\";\nimport { html } from \"@gui/assets/mock\";\nimport { useOverlay, useOverlayComponent } from \"@gui/lib/overlay\";\n\nconst Iframe = styled.iframe`\n  width: 100%;\n  flex: 1;\n  border: 0;\n  overflow: scroll;\n`;\n\nexport function WebPreview() {\n  const [ref, setRef] = useState<HTMLIFrameElement | null>(null);\n  const { setRoot, root } = useOverlay();\n  const jsx = useOverlayComponent();\n\n  const mountNode = root?.body;\n\n  const props =\n    process.env.NODE_ENV === \"development\"\n      ? {\n          srcDoc: html,\n        }\n      : {\n          src: \"https://dmitryshelomanov.github.io/\",\n        };\n\n  return (\n    <Iframe\n      ref={setRef}\n      {...props}\n      onLoad={() => {\n        if (ref?.contentWindow?.document) {\n          console.log(\"load\");\n          setRoot(ref?.contentWindow?.document);\n        }\n      }}\n    >\n      {mountNode && createPortal(jsx, mountNode)}\n    </Iframe>\n  );\n}\n","export type NodeAttr = {\n  name: string;\n  value: string;\n};\n\nexport type NodeParserResult = {\n  name: string;\n  node: HTMLElement;\n  children: NodeParserResult[];\n  value: string;\n  attrs: NodeAttr[];\n  id: number;\n};\n\nexport function nodeParser(elements: HTMLElement[]) {\n  const queue = [...elements];\n  const result: NodeParserResult[] = [];\n  const map = new WeakMap();\n  let id = 0;\n\n  while (queue.length > 0) {\n    const node = queue.shift()!;\n    // @ts-ignore\n    const nodes = node.childNodes as HTMLElement[];\n\n    const parentNode = node.parentElement ? map.get(node.parentElement) : null;\n\n    const attrs = node.attributes\n      ? [...node.attributes].map((it) => ({\n          name: it.name,\n          value: it.value,\n        }))\n      : [];\n\n    const nodeInfo = {\n      name: node.localName || node.nodeName,\n      children: [],\n      value: node.textContent?.replace(/  +|\\n/gi, \" \")?.trim() ?? \"\",\n      node,\n      attrs,\n      id,\n    };\n\n    const isEmpty =\n      (nodeInfo.name === \"#text\" || nodeInfo.name === \"#comment\") &&\n      nodeInfo.value === \"\";\n\n    if (parentNode && !isEmpty) {\n      // @ts-ignore\n      parentNode.children.push(nodeInfo);\n    }\n\n    if (!parentNode) {\n      result.push(nodeInfo);\n    }\n\n    map.set(node, nodeInfo);\n    queue.unshift(...[...nodes]);\n\n    id += 1;\n  }\n\n  return result;\n}\n","export function getElementFromXPath(path: string, root?: Document) {\n  const targert = root ?? document;\n  const result: HTMLElement[] = [];\n  const nodesSnapshot = document.evaluate(\n    path,\n    targert,\n    null,\n    XPathResult.ORDERED_NODE_SNAPSHOT_TYPE,\n    null\n  );\n\n  for (var i = 0; i < nodesSnapshot.snapshotLength; i++) {\n    const node = nodesSnapshot.snapshotItem(i);\n\n    if (node) {\n      // @ts-ignore\n      result.push(node);\n    }\n  }\n\n  return result;\n}\n\nexport function getXpathFromElement(el: HTMLElement): string {\n  if (!el || el.nodeType != 1) {\n    return \"\";\n  }\n\n  if (el.id) {\n    return \"//*[@id='\" + el.id + \"']\";\n  }\n\n  const sames = [].filter.call(\n    el.parentNode?.children,\n    (x: HTMLElement) => x.tagName == el.tagName\n  );\n\n  return (\n    // @ts-ignore\n    getXpathFromElement(el.parentNode) +\n    \"/\" +\n    el.tagName.toLowerCase() +\n    // @ts-ignore\n    (sames.length > 1 ? \"[\" + ([].indexOf.call(sames, el) + 1) + \"]\" : \"\")\n  );\n}\n\nexport const xpathTransformers = {\n  removeLast: (xpath: string) => xpath.split(\"/\").slice(0, -1).join(\"/\"),\n  attachAllChildren: (xpath: string, childTag?: string) =>\n    `${xpath}/${childTag ?? \"*\"}`,\n};\n","import { Dialog } from \"evergreen-ui\";\n\nexport function ModalUI({\n  children,\n  isOpened,\n  closeModal,\n  onConfirm,\n  confirmLabel,\n}: {\n  children: JSX.Element;\n  closeModal: () => void;\n  isOpened: boolean;\n  onConfirm?: () => void;\n  confirmLabel?: string;\n}) {\n  return (\n    <Dialog\n      confirmLabel={confirmLabel}\n      isShown={isOpened}\n      title=\"Token settings\"\n      onCloseComplete={closeModal}\n      onConfirm={onConfirm}\n    >\n      {children}\n    </Dialog>\n  );\n}\n","import { BrowserRouter, Route } from \"react-router-dom\";\nimport { Pane, Text, TextInput, Heading } from \"evergreen-ui\";\nimport styled from \"styled-components\";\n\nconst Wrapper = styled.div`\n  flex: 1;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 100%;\n  flex-direction: column;\n`;\n\nconst Head = styled(Heading)`\n  margin-bottom: 12px;\n`;\n\nexport function Stub() {\n  return (\n    <Wrapper>\n      <Head size={900}>Set site url or paste code</Head>\n      <TextInput\n        value=\"https://dmitryshelomanov.github.io/\"\n        disabled\n        size=\"large\"\n      />\n    </Wrapper>\n  );\n}\n","import styled from \"styled-components\";\n\ntype Props = {\n  jc?: \"space-between\" | \"space-around\" | \"flex-start\" | \"flex-end\";\n  ai?: \"center\" | \"flex-start\" | \"fle-end\";\n};\n\nexport const Col = styled.div<Props>`\n  display: flex;\n  justify-content: ${(p) => p.jc};\n  align-items: ${(p) => p.ai};\n  flex-direction: column;\n`;\n\nexport const Row = styled.div<Props>`\n  display: flex;\n  justify-content: ${(p) => p.jc};\n  align-items: ${(p) => p.ai};\n  flex-direction: row;\n`;\n","import { createEvent, createStore } from \"effector\";\n\nexport type Token = { xpath: string; name: string };\n\nexport const addToken = createEvent<Token>();\nexport const removeToken = createEvent<string>();\n\nexport const $tokens = createStore<Token[]>([])\n  .on(addToken, (state, token) => [...state, token])\n  .on(removeToken, (state, id) => state.filter((token) => token.name !== id));\n\nexport const $tokensCounter = $tokens.map((tokens) => tokens.length);\n","import { format } from \"@gui/lib/codegen/prettier\";\nimport { wrapp } from \"@gui/lib/codegen/tokens\";\nimport { createEvent, createStore } from \"effector\";\nimport { removeToken } from \"./tokens\";\n\nexport type Editor = { opened: boolean; code: string };\n\nconst initalState = {\n  opened: true,\n  code: format(\n    wrapp({\n      name: \"transformer\",\n      body: [\"return textExtractor(element)\"],\n      args: [\"[element]\"],\n      notice: `\n        import {textExtractor} from 'gui'\n\n        // Код запускается на сервере принимая на вход HTMLElement[]\n      `,\n    })\n  ),\n};\n\nexport const openEditor = createEvent<string>();\nexport const closeEditor = createEvent<string>();\nexport const changeCode = createEvent<{ id: string; code: string }>();\n\nexport const $editors = createStore<Record<string, Editor>>({})\n  .on(openEditor, (state, id) => ({\n    ...state,\n    [id]: state[id] ? { ...state[id], opened: true } : initalState,\n  }))\n  .on(closeEditor, (state, id) => ({\n    ...state,\n    [id]: { ...state[id], opened: false },\n  }))\n  .on(changeCode, (state, { id, code }) => ({\n    ...state,\n    [id]: { ...state[id], code },\n  }))\n  .on(removeToken, (state, name) => {\n    const { [name]: _, ...rest } = state;\n\n    return rest;\n  });\n\nexport const $openedEditors = $editors.map((editors) =>\n  Object.keys(editors).filter((id) => editors[id].opened)\n);\n","import plugin from \"prettier/parser-babel\";\nimport { format as f } from \"prettier/standalone\";\n\nexport const format = (code: string) =>\n  f(code, { parser: \"babel\", plugins: [plugin] });\n","import { LIBS, PAGE } from \"./constants\";\n\nexport function attachLibs(type: string, body: string) {\n  const code = `\n    window.${LIBS}.${type} = ${body}\n  `;\n\n  return code;\n}\n\nexport function evulate({ body, args }: { body: string[]; args?: string[] }) {\n  const mappedArgs = args ? args.join(\", \") : \"\";\n  const code = `\n    // Code inside run in browser\n    // All args must pass to\n    return ${PAGE}.evulate((${mappedArgs}) => {\n      ${body.join(\";\")}\n    })\n  `;\n\n  return code;\n}\n\nexport function wrapp({\n  body,\n  name,\n  args,\n  notice,\n}: {\n  body: string[];\n  name: string;\n  args: string[];\n  notice?: string;\n}) {\n  const code = `\n    ${notice}\n    function ${name}(${args.join(\", \")}) {\n      ${body.join(\" \")} \n    }\n  `;\n\n  return code;\n}\n\nexport function returnS({\n  type,\n  fields,\n}: {\n  type: \"object\" | \"array\" | \"alone\";\n  fields: string[];\n}) {\n  switch (type) {\n    case \"object\":\n      return `\n        return {${fields.join(\",\")}}\n      `;\n\n    case \"array\":\n      return `\n          return [${fields.join(\",\")}]\n        `;\n\n    default:\n      return `\n          return ${fields.join(\",\")}\n        `;\n  }\n}\n","import { NodeParserResult } from \"@gui/lib/parser\";\nimport { getXpathFromElement, xpathTransformers } from \"@gui/lib/xpath\";\nimport { ModalUI } from \"@gui/ui/organisms\";\nimport { Pane, Text, Label, TextInput, Checkbox } from \"evergreen-ui\";\nimport { useMemo, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { addToken } from \"./models\";\n\nconst PaneUI = styled(Pane)`\n  display: flex;\n  margin-bottom: 65px;\n  justify-content: space-between;\n  flex: 1 1 auto;\n`;\n\nconst PaneSettings = styled(Pane)`\n  flex: 1;\n  padding-left: 15px;\n`;\n\nconst FormWrapper = styled.div`\n  display: flex;\n  margin-top: 12px;\n  align-items: center;\n\n  > label {\n    margin: 0;\n    margin-right: 3;\n  }\n`;\n\nconst { removeLast, attachAllChildren } = xpathTransformers;\n\nexport function TokenModal({\n  node,\n  onClose,\n}: {\n  node: NodeParserResult | null;\n  onClose: () => void;\n}) {\n  const [tokenName, setTokenName] = useState(\"\");\n  const [allChildren, setAllChildren] = useState(false);\n  const [onlyByTag, setOnlyByTag] = useState(true);\n\n  const nodetag = node && onlyByTag ? node.name : \"*\";\n\n  const xpath = useMemo(\n    () => (node ? getXpathFromElement(node.node) : \"\"),\n    [node]\n  );\n\n  const mappedXpath = useMemo(\n    () =>\n      !allChildren ? xpath : attachAllChildren(removeLast(xpath), nodetag),\n    [allChildren, xpath, nodetag]\n  );\n\n  return (\n    <ModalUI\n      isOpened={!!node}\n      closeModal={onClose}\n      onConfirm={() => {\n        addToken({ xpath: mappedXpath, name: tokenName });\n        onClose();\n      }}\n      confirmLabel=\"Create\"\n    >\n      <PaneUI>\n        <PaneSettings>\n          <FormWrapper>\n            <Label>Xpath: </Label>\n            <Text>{mappedXpath}</Text>\n          </FormWrapper>\n          <FormWrapper>\n            <Label>All children from parent: </Label>\n            <Checkbox\n              checked={allChildren}\n              onChange={() => setAllChildren((prev) => !prev)}\n            />\n          </FormWrapper>\n          <FormWrapper>\n            <Label>Only by selected tag: </Label>\n            <Checkbox\n              checked={onlyByTag}\n              onChange={() => setOnlyByTag((prev) => !prev)}\n            />\n          </FormWrapper>\n          <FormWrapper>\n            <Label>Token name: </Label>\n            <TextInput\n              value={tokenName}\n              // @ts-ignore\n              onChange={(event) => setTokenName(event.target.value)}\n            />\n          </FormWrapper>\n        </PaneSettings>\n      </PaneUI>\n    </ModalUI>\n  );\n}\n","import styled, { css } from \"styled-components\";\nimport { NodeAttr } from \"@gui/lib/parser\";\n\ntype BaseProps = {\n  lvl?: number;\n  onHover?: () => void;\n  onLeave?: () => void;\n  onClick?: () => void;\n  isActive?: boolean;\n};\n\nconst tabSize = 15;\n\nconst colors = {\n  tag: \"#7d1076\",\n  attributeValue: \"rgb(10, 48, 105)\",\n  attributeKey: \"#91461c\",\n  text: \"#30373e\",\n  commentColor: \"green\",\n};\n\nconst TagWrapper = styled.div<{ lvl?: number; isActive?: boolean }>`\n  color: ${colors.tag};\n  font-weight: bold;\n  display: block;\n  margin-left: ${(p) => (p.lvl ?? 0) * tabSize}px;\n  cursor: pointer;\n  transition: 0.2s;\n  font-size: 14px;\n\n  &:hover {\n    background-color: #ac5c5c37;\n  }\n\n  ${(p) =>\n    p.isActive &&\n    css`\n      background-color: #ac5c5c37;\n    `}\n`;\n\nconst TextWrapper = styled.div<{\n  lvl?: number;\n  isActive?: boolean;\n  isComment?: boolean;\n}>`\n  display: block;\n  margin-left: ${(p) => (p.lvl ?? 0) * tabSize}px;\n  cursor: pointer;\n  color: ${colors.text};\n  transition: 0.2s;\n  white-space: normal;\n  font-size: 14px;\n\n  &:hover {\n    background-color: #ac5c5c37;\n  }\n\n  ${(p) =>\n    p.isActive &&\n    css`\n      background-color: #ac5c5c37;\n    `}\n\n  ${(p) =>\n    p.isComment &&\n    css`\n      font-size: 12px;\n      color: ${colors.commentColor};\n    `}\n`;\n\nconst AttributesWrapper = styled.span`\n  font-weight: normal;\n  border: none;\n  background: none;\n  white-space: normal;\n  margin-left: 5px;\n`;\n\nexport const TreeContainer = styled.pre`\n  padding: 5px;\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  font-size: 14px;\n  overflow: scroll;\n  margin: 0;\n\n  > div {\n    font-weight: 100;\n  }\n`;\n\nexport function Tag({\n  name,\n  isOpened,\n  attributes = [],\n  lvl,\n  onLeave,\n  onHover,\n  ...props\n}: {\n  name: string;\n  isOpened: boolean;\n  attributes?: NodeAttr[];\n} & BaseProps) {\n  const start = isOpened ? \"<\" : \"</\";\n  const end = \">\";\n\n  return (\n    <TagWrapper\n      lvl={lvl}\n      onMouseEnter={onHover}\n      onMouseLeave={onLeave}\n      {...props}\n    >\n      {start}\n      {name}\n      {attributes.map((it) => (\n        <AttributesWrapper key={it.name}>\n          <span style={{ color: colors.attributeKey }}>{it.name}=</span>\n          <span style={{ color: colors.attributeValue }}>\"{it.value}\"</span>\n        </AttributesWrapper>\n      ))}\n      {end}\n    </TagWrapper>\n  );\n}\n\nexport function Text({\n  text,\n  lvl,\n  onHover,\n  onLeave,\n}: { text: string } & BaseProps) {\n  return (\n    <TextWrapper lvl={lvl} onMouseEnter={onHover} onMouseLeave={onLeave}>\n      {text}\n    </TextWrapper>\n  );\n}\n\nexport function Comment({ text, lvl }: { text: string } & BaseProps) {\n  return (\n    <TextWrapper lvl={lvl} isComment>\n      {\"<!-- \"}\n      {text}\n      {\" -->\"}\n    </TextWrapper>\n  );\n}\n","import { NodeParserResult } from \"@gui/lib/parser\";\nimport { WithActivePreviewNode } from \"@gui/lib/overlay\";\nimport { Tag, Text, Comment } from \"./elements\";\n\nexport type OverlayChange =\n  | { type: \"reset\"; payload?: {} }\n  | { type: \"set\"; payload: HTMLElement };\n\nexport function NodeTree({\n  nodeList,\n  lvl = 0,\n  changeOverlayStyles,\n  draft = false,\n  onClick,\n}: {\n  nodeList: NodeParserResult[];\n  lvl?: number;\n  changeOverlayStyles?: (arg0: OverlayChange) => void;\n  draft?: boolean;\n  onClick?: (arg0: NodeParserResult) => void;\n}) {\n  return (\n    <>\n      {nodeList.map((node) => {\n        const props = draft\n          ? {}\n          : {\n              onHover: () => {\n                if (changeOverlayStyles) {\n                  changeOverlayStyles({ type: \"set\", payload: node.node });\n                }\n              },\n              onLeave: () => {\n                if (changeOverlayStyles) {\n                  changeOverlayStyles({ type: \"reset\" });\n                }\n              },\n              onClick: () => {\n                if (onClick) {\n                  onClick(node);\n                }\n              },\n            };\n\n        if (node.name === \"#text\") {\n          return <Text text={node.value} lvl={lvl} {...props} key={node.id} />;\n        }\n\n        if (node.name === \"#comment\") {\n          return <Comment text={node.value} lvl={lvl} key={node.id} />;\n        }\n\n        return (\n          <WithActivePreviewNode key={node.id} currentNode={node.node}>\n            {(isActive) => (\n              <>\n                <Tag\n                  name={node.name}\n                  isOpened\n                  lvl={lvl}\n                  attributes={node.attrs}\n                  {...props}\n                  key={`${node.id}-opened`}\n                  isActive={isActive}\n                />\n                <NodeTree\n                  nodeList={node.children}\n                  lvl={lvl + 1}\n                  changeOverlayStyles={changeOverlayStyles}\n                  key={`${node.id}-children`}\n                  draft={draft}\n                  onClick={onClick}\n                />\n                <Tag\n                  name={node.name}\n                  isOpened={false}\n                  lvl={lvl}\n                  {...props}\n                  key={`${node.id}-closed`}\n                  isActive={isActive}\n                />\n              </>\n            )}\n          </WithActivePreviewNode>\n        );\n      })}\n    </>\n  );\n}\n","import { getElementFromXPath, getXpathFromElement } from \"../xpath\";\n\nexport function textExtractor(el: HTMLElement) {\n  return el.textContent;\n}\n\nexport function classList(el: HTMLElement) {\n  return [...el.classList];\n}\n\nexport function $element(element: HTMLElement, selector: string) {\n  const findedElement = element.querySelector(selector);\n\n  if (findedElement) {\n    return findedElement;\n  }\n\n  throw new Error(\"element not fined\");\n}\n\nexport function $$element(element: HTMLElement, selector: string) {\n  const findedElements = element.querySelectorAll(selector);\n\n  return findedElements;\n}\n\nexport const defaultLibs = {\n  $$element: $$element.toString(),\n  $element: $element.toString(),\n  classList: classList.toString(),\n  textExtractor: textExtractor.toString(),\n  getXpathFromElement: getXpathFromElement.toString(),\n  getElementFromXPath: getElementFromXPath.toString(),\n};\n","import Inspector from \"react-inspector\";\nimport { useStore, useStoreMap } from \"effector-react\";\nimport {\n  Pane,\n  Text,\n  ChevronRightIcon,\n  ChevronUpIcon,\n  EditIcon,\n  RemoveIcon,\n} from \"evergreen-ui\";\nimport { useState } from \"react\";\nimport styled from \"styled-components\";\nimport { NodeTree, TreeContainer } from \"@gui/features/common\";\nimport { executeTransformer } from \"@gui/lib/babel\";\nimport { defaultLibs } from \"@gui/lib/codegen/libs\";\nimport { useOverlay } from \"@gui/lib/overlay\";\nimport { nodeParser } from \"@gui/lib/parser\";\nimport { getElementFromXPath } from \"@gui/lib/xpath\";\nimport { Col, Row } from \"@gui/ui/organisms\";\nimport { $tokens, Token, openEditor, $editors, removeToken } from \"../models\";\n\nconst PaneUI = styled(Pane)`\n  margin: 12px;\n  padding: 12px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  flex-direction: column;\n`;\n\nconst ShortInformation = styled(Row)`\n  width: 100%;\n  justify-content: space-between;\n  align-items: center;\n`;\n\nconst Additional = styled(Col)`\n  width: 100%;\n  justify-content: center;\n  align-items: flex-start;\n  margin-top: 12px;\n  border-top: 1px solid #e5e8ee;\n`;\n\nconst Icons = styled.div`\n  margin: 0 5px;\n  cursor: pointer;\n`;\n\nfunction TokenItem({ token }: { token: Token }) {\n  const [visible, setVisible] = useState(false);\n  const { root } = useOverlay();\n  const elements = root ? getElementFromXPath(token.xpath, root) : [];\n  const parsed = elements ? nodeParser(elements) : [];\n\n  const code = useStoreMap({\n    store: $editors,\n    keys: [token.name, elements],\n    fn: (editors, [tokenId, nodes]) => {\n      if (editors[tokenId]) {\n        const { code } = editors[tokenId];\n\n        return executeTransformer({\n          code,\n          args: nodes,\n          libs: defaultLibs,\n        });\n      }\n\n      return \"\";\n    },\n  });\n\n  const toggleVisible = () => {\n    setVisible((prev) => !prev);\n  };\n\n  return (\n    <PaneUI border=\"default\" key={token.name}>\n      <ShortInformation>\n        <Col>\n          <Text>Token name: {token.name}</Text>\n          <Text>Xpath: {token.xpath}</Text>\n        </Col>\n        <Row>\n          <Icons>\n            <EditIcon\n              onClick={() => {\n                openEditor(token.name);\n              }}\n            />\n          </Icons>\n          <Icons>\n            {visible ? (\n              <ChevronUpIcon onClick={toggleVisible} />\n            ) : (\n              <ChevronRightIcon onClick={toggleVisible} />\n            )}\n          </Icons>\n          <Icons>\n            <RemoveIcon\n              onClick={() => {\n                removeToken(token.name);\n              }}\n            />\n          </Icons>\n        </Row>\n      </ShortInformation>\n      {visible && (\n        <Additional>\n          {parsed && (\n            <TreeContainer>\n              <NodeTree draft nodeList={parsed} />\n            </TreeContainer>\n          )}\n          <Text>Result: </Text>\n          <Inspector data={{ [token.name]: code }} expandLevel={10} />\n        </Additional>\n      )}\n    </PaneUI>\n  );\n}\n\nexport function TokensList() {\n  const tokens = useStore($tokens);\n\n  return (\n    <>\n      {tokens.map((token) => (\n        <TokenItem token={token} key={token.name} />\n      ))}\n    </>\n  );\n}\n","import AceEditor from \"react-ace\";\nimport \"ace-builds/src-noconflict/theme-solarized_light\";\nimport \"ace-builds/src-noconflict/mode-javascript\";\nimport \"ace-builds/src-min-noconflict/ext-searchbox\";\nimport \"ace-builds/src-min-noconflict/ext-language_tools\";\n\nimport AutoSizer from \"react-virtualized-auto-sizer\";\nimport styled from \"styled-components\";\n\nconst Wrapper = styled.div`\n  display: block;\n  width: 100%;\n  height: 100%;\n`;\n\nexport function CodeEditor({\n  value,\n  onChange,\n}: {\n  value?: string;\n  onChange?: (arg0: string) => void;\n}) {\n  return (\n    <Wrapper>\n      <AutoSizer>\n        {({ width, height }) => {\n          return (\n            <AceEditor\n              value={value}\n              onChange={(nextValue) => {\n                if (onChange) {\n                  onChange(nextValue);\n                }\n              }}\n              style={{ width, height }}\n              mode=\"javascript\"\n              theme=\"solarized_light\"\n              name=\"editor\"\n              editorProps={{ $blockScrolling: true }}\n              setOptions={{\n                enableBasicAutocompletion: true,\n                enableLiveAutocompletion: true,\n                enableSnippets: false,\n                showLineNumbers: true,\n                tabSize: 2,\n              }}\n            />\n          );\n        }}\n      </AutoSizer>\n    </Wrapper>\n  );\n}\n","import { useStoreMap } from \"effector-react\";\nimport {\n  CrossIcon,\n  Pane,\n  Text,\n  Button,\n  ChevronDownIcon,\n  ChevronRightIcon,\n} from \"evergreen-ui\";\nimport { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport Incpector from \"react-inspector\";\nimport { TreeContainer, NodeTree } from \"@gui/features/common\";\nimport { CodeEditor } from \"@gui/lib/editor\";\nimport { useOverlay } from \"@gui/lib/overlay\";\nimport { nodeParser } from \"@gui/lib/parser\";\nimport { executeTransformer } from \"@gui/lib/babel\";\nimport { defaultLibs } from \"@gui/lib/codegen/libs\";\nimport { getElementFromXPath } from \"@gui/lib/xpath\";\nimport { Col, Row } from \"@gui/ui/organisms\";\nimport { $editors, changeCode, closeEditor, $tokens } from \"../models\";\n\nconst EditorWrapper = styled(Col)`\n  width: 100%;\n  height: 100%;\n`;\n\nconst NoticeWrapper = styled(Pane)`\n  padding: 12px;\n  max-height: 50%;\n`;\n\nconst InspectorWrapper = styled.div`\n  margin: 12px 0;\n`;\n\nexport function CloseEditorIcon({ id }: { id: string }) {\n  const parsedId = id.split(\"-\")[1];\n\n  return (\n    <CrossIcon\n      margin={8}\n      onClick={() => {\n        closeEditor(parsedId);\n      }}\n    />\n  );\n}\n\nfunction Notice({ id }: { id: string }) {\n  const [opened, setOpened] = useState(true);\n  const [result, setResult] = useState(null);\n  const { root } = useOverlay();\n\n  const token = useStoreMap({\n    store: $tokens,\n    keys: [id],\n    fn: (tokens, [tokenId]) => tokens.find((it) => it.name === tokenId) ?? null,\n  });\n\n  const { xpath = \"\" } = token ?? {};\n  const elements = getElementFromXPath(xpath, root);\n  const nodes = nodeParser(elements);\n\n  const code = useStoreMap({\n    store: $editors,\n    keys: [id],\n    fn: (editors, [tokenId]) => {\n      if (editors[tokenId]) {\n        const { code } = editors[tokenId];\n\n        return code;\n      }\n\n      return \"\";\n    },\n  });\n\n  const toggle = () => {\n    setOpened((prev) => !prev);\n  };\n\n  const execure = () => {\n    setResult(\n      executeTransformer({\n        code,\n        args: elements,\n        libs: defaultLibs,\n      })\n    );\n  };\n\n  return (\n    <NoticeWrapper>\n      <Row jc=\"flex-end\" ai=\"center\" onClick={toggle}>\n        <Text>Board</Text>\n        {opened ? <ChevronDownIcon /> : <ChevronRightIcon />}\n      </Row>\n      {opened && (\n        <>\n          <Button onClick={execure}>Test</Button>\n          <Col>\n            {result && (\n              <InspectorWrapper>\n                <Incpector data={{ [id]: result }} />\n              </InspectorWrapper>\n            )}\n            <TreeContainer>\n              <NodeTree nodeList={nodes} />\n            </TreeContainer>\n          </Col>\n        </>\n      )}\n    </NoticeWrapper>\n  );\n}\n\nexport function TokenEditor({ id }: { id: string }) {\n  const parsedId = id.split(\"-\")[1];\n  const code = useStoreMap({\n    store: $editors,\n    keys: [parsedId],\n    fn: (editors, [tokenId]) => editors[tokenId].code,\n  });\n\n  return (\n    <EditorWrapper>\n      <CodeEditor\n        value={code}\n        onChange={(value) => {\n          changeCode({ id: parsedId, code: value });\n        }}\n      />\n      <Notice id={parsedId} key={parsedId} />\n    </EditorWrapper>\n  );\n}\n","import { useCallback, useMemo, useState } from \"react\";\nimport { nodeParser, NodeParserResult } from \"@gui/lib/parser\";\nimport { getElementBounging, useOverlay } from \"@gui/lib/overlay\";\nimport { TokenModal } from \"@gui/features/token-creator\";\nimport { NodeTree, TreeContainer, OverlayChange } from \"@gui/features/common\";\n\nexport function CodePreview({ target }: { target: HTMLElement | null }) {\n  const { setStyles, resetStyles } = useOverlay();\n  const [selectedNode, setSelectedNode] = useState<NodeParserResult | null>(\n    null\n  );\n\n  const nodeList = useMemo(\n    () => (target ? nodeParser([target]) : []),\n    [target]\n  );\n  const key = useMemo(() => (Math.random() * 10000).toString(), [target]);\n\n  const changeOverlayStyles = useCallback(\n    (action: OverlayChange) => {\n      if (action.type === \"set\") {\n        const next = getElementBounging(action.payload);\n\n        setStyles((prev) => ({ ...prev, ...next }));\n      } else {\n        resetStyles();\n      }\n    },\n    [setStyles, resetStyles]\n  );\n\n  if (!target) {\n    return null;\n  }\n\n  return (\n    <>\n      <TreeContainer>\n        <NodeTree\n          key={key}\n          nodeList={nodeList}\n          changeOverlayStyles={changeOverlayStyles}\n          onClick={setSelectedNode}\n        />\n      </TreeContainer>\n      {selectedNode && (\n        <TokenModal onClose={() => setSelectedNode(null)} node={selectedNode} />\n      )}\n    </>\n  );\n}\n","import { useEffect, useMemo, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { useStore } from \"effector-react\";\nimport { If, Switch, Then, Case } from \"react-if\";\nimport { Pane, Heading, Tablist, Tab, Paragraph, Pill } from \"evergreen-ui\";\nimport { OverlayProvider } from \"@gui/lib/overlay\";\nimport { WebPreview } from \"@gui/features/web-preview\";\nimport { CodePreview } from \"@gui/features/code-preview\";\nimport {\n  TokensList,\n  $openedEditors,\n  TokenEditor,\n  CloseEditorIcon,\n  openEditor,\n} from \"@gui/features/token-creator\";\nimport { $tokensCounter } from \"@gui/features/token-creator\";\n\nconst PaneUI = styled(Pane)`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  max-width: 50%;\n  overflow: scroll;\n`;\n\nconst TablistUI = styled(Tablist)`\n  padding: 13px;\n  margin: 0;\n  border-bottom: 1px solid #e5e8ef;\n  background-color: #fff;\n  z-index: 10;\n  position: sticky;\n  top: 0;\n`;\n\nconst Title = styled(Heading)`\n  padding: 15px;\n  border-bottom: 1px solid #e5e8ef;\n`;\n\nconst Wrapper = styled.div`\n  flex: 1;\n  height: 100vh;\n  margin: 0 16px;\n  display: flex;\n  overflow: hidden;\n`;\n\nexport function HomePage() {\n  const openedEditors = useStore($openedEditors);\n  const [element, setElement] = useState<HTMLElement | null>(null);\n  const [selectedTabName, setSelectedTabName] = useState(\"Code tools\");\n  const counter = useStore($tokensCounter);\n\n  const tabs = useMemo(\n    () => [\n      { name: \"Code tools\" },\n      { name: \"Tokens\" },\n      ...openedEditors.map((name) => ({ name: `editor-${name}` })),\n    ],\n    [openedEditors]\n  );\n\n  const selectedIndex = useMemo(\n    () => tabs.findIndex((tab) => tab.name === selectedTabName),\n    [selectedTabName, tabs]\n  );\n\n  useEffect(() => {\n    setSelectedTabName(\"Code tools\");\n  }, [element]);\n\n  useEffect(() => {\n    if (!tabs[selectedIndex]) {\n      setSelectedTabName(\"Code tools\");\n    }\n  }, [tabs, selectedIndex]);\n\n  useEffect(() => {\n    return openEditor.watch((id) => {\n      setSelectedTabName(`editor-${id}`);\n    });\n  }, [tabs]);\n\n  return (\n    <OverlayProvider elementClicked={setElement}>\n      <Wrapper>\n        <PaneUI border=\"default\">\n          <Title size={600}>Web preview</Title>\n          <WebPreview />\n        </PaneUI>\n        <PaneUI border=\"default\" style={{ background: \"#fcfdff\" }}>\n          <TablistUI marginRight={24}>\n            {tabs.map(({ name }, index) => (\n              <Tab\n                key={name}\n                id={name}\n                onSelect={() => setSelectedTabName(name)}\n                isSelected={index === selectedIndex}\n                aria-controls={`panel-${name}`}\n              >\n                {name}\n                {name === \"Tokens\" && (\n                  <Pill display=\"inline-flex\" margin={8} color=\"red\">\n                    {counter}\n                  </Pill>\n                )}\n                {name.startsWith(\"editor-\") && <CloseEditorIcon id={name} />}\n              </Tab>\n            ))}\n          </TablistUI>\n          <If condition={!!tabs[selectedIndex]}>\n            <Then>\n              <Switch>\n                <Case condition={tabs[0].name === tabs[selectedIndex]?.name}>\n                  {element ? (\n                    <CodePreview target={element} />\n                  ) : (\n                    <Paragraph size={400}>\n                      Тут будут отображаться выбранные элементы\n                    </Paragraph>\n                  )}\n                </Case>\n                <Case condition={tabs[1].name === tabs[selectedIndex]?.name}>\n                  <TokensList />\n                </Case>\n                <Case\n                  condition={tabs[selectedIndex]?.name.startsWith(\"editor-\")}\n                >\n                  <TokenEditor id={tabs[selectedIndex]?.name} />\n                </Case>\n              </Switch>\n            </Then>\n          </If>\n        </PaneUI>\n      </Wrapper>\n    </OverlayProvider>\n  );\n}\n","import { BrowserRouter, Route } from \"react-router-dom\";\nimport { GlobalStyle } from \"@gui/ui/styles\";\nimport { HomePage } from \"./home\";\n\nexport function RootRouter() {\n  return (\n    <>\n      <GlobalStyle />\n      <BrowserRouter>\n        <Route path=\"*\" component={HomePage} />\n      </BrowserRouter>\n    </>\n  );\n}\n","import ReactDOM from \"react-dom\";\nimport { RootRouter } from \"./pages\";\n\nconst root = document.getElementById(\"root\");\n\nReactDOM.render(<RootRouter />, root);\n","import { parse } from \"@babel/parser\";\nimport traverse from \"@babel/traverse\";\nimport {\n  ImportSpecifier,\n  ImportDefaultSpecifier,\n  ImportNamespaceSpecifier,\n} from \"@babel/types\";\nimport generate from \"@babel/generator\";\n\nexport function getFunctionFromCode({\n  code,\n  name,\n  body = false,\n}: {\n  code: string;\n  name: string;\n  body?: boolean;\n}) {\n  let result = \"\";\n  let params: string[] = [];\n  const ast = parse(code, { sourceType: \"module\" });\n\n  traverse(ast, {\n    FunctionDeclaration(path) {\n      if (path.node.id?.name === name) {\n        result = !body\n          ? generate(path.node).code\n          : generate(path.node.body).code;\n\n        params.push(...path.node.params.map((param) => generate(param).code));\n      }\n    },\n  });\n\n  return { result, params };\n}\n\nexport function getImportsFromGUI({ code }: { code: string }) {\n  let result: string[] = [];\n  const ast = parse(code, { sourceType: \"module\" });\n\n  function isImportSpecifier(\n    node: ImportDefaultSpecifier | ImportNamespaceSpecifier | ImportSpecifier\n  ): node is ImportSpecifier {\n    return node.type === \"ImportSpecifier\";\n  }\n\n  traverse(ast, {\n    ImportDeclaration(path) {\n      if (path.node.source.value === \"gui\") {\n        result = [...path.node.specifiers]\n          .filter(isImportSpecifier)\n          .reduce(\n            (acc: string[], it: ImportSpecifier) =>\n              it.imported.type === \"Identifier\"\n                ? [...acc, it.imported.name]\n                : acc,\n            []\n          );\n      }\n    },\n  });\n\n  return result;\n}\n"],"sourceRoot":""}